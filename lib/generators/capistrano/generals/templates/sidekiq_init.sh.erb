#!/bin/bash
<%= template_to_s('_head').to_s %>
### BEGIN INIT INFO
# Provides:          sidekiq
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Manage sidekiq workers
# Description:       Starts and Stops Sidekiq message processor for Stratus application.
### END INIT INFO

# User-specified exit parameters used in this script:
#
# Exit Code 5 - Incorrect User ID
# Exit Code 6 - Directory not found

# User variables
AS_USER=<%= fetch(:sidekiq_user) %>
APP_DIR=<%= current_path %>

# System variables
LOG_FILE=<%= sidekiq_log_file %>
START_CMD="<%= bundle_sidekiq('-P', fetch(:sidekiq_pid), '-c', fetch(:sidekiq_workers)) %>"
CMD="cd ${APP_DIR}; ${START_CMD} >> ${LOG_FILE} 2>&1 &"
RETVAL=0

start() {
  status
  if [ $? -eq 1 ]; then
    echo "Starting sidekiq message processor .. "
    [ `id -u` == '0' ] || (echo "sidekiq runs as root only .."; exit 5)
    [ -d $APP_DIR ] || (echo "$APP_DIR not found!.. Exiting"; exit 6)
    cd $APP_DIR
    su -c "$CMD" - $AS_USER
    RETVAL=$?
    #Sleeping for 8 seconds for process to be precisely visible in process table - See status ()
    sleep 8
    return $RETVAL
  else
    echo "Sidekiq message processor is already running .. "
  fi
}

stop() {
  status
  if [ $? -eq 0 ]; then
    echo "Stopping sidekiq message processor .."
    SIG="INT"
    pid
    kill -$SIG $PID
    RETVAL=$?
    return $RETVAL
  else
    echo "Sidekiq message processor is stopped already .."
  fi
}

status() {
  STATUS=$(ps -ef | grep "sidekiq [0-9]*.[0-9]*.[0-9]* ${APP}" | grep -v grep)
  return $?
}

pid() {
  status
  PID=$(echo "$STATUS" | awk '{print $2}')
  return $PID
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status
    if [ $? -eq 0 ]; then
      echo "Sidekiq message processor is running .."
      RETVAL=0
    else
      echo "Sidekiq message processor is stopped .."
      RETVAL=1
    fi
    ;;
  pid)
    pid
    echo "$PID"
    ;;
  *)
    echo "Usage: $0 {start|stop|status|pid}"
    exit 0
    ;;
esac
exit $RETVAL
